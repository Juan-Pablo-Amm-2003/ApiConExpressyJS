Guía para Levantar el Backend
Este documento proporciona instrucciones paso a paso sobre cómo configurar y ejecutar el backend de este proyecto.

Requisitos Previos
Asegúrate de tener instalados los siguientes elementos en tu máquina:

Node.js (versión 14 o superior)
npm (versión 6 o superior)
MySQL (versión 8.0 o superior)

Configuración Inicial
Clona el repositorio:
git clone https://github.com/tu-usuario/tu-repositorio.git
cd tu-repositorio
Instala las dependencias:
npm install
Configura las variables de entorno:

Crea un archivo .env en la raíz del proyecto y define las siguientes variables de entorno:
PORT=3000
DB_NAME=nombre_de_tu_base_de_datos
DB_USER=usuario_de_tu_base_de_datos
DB_PASSWORD=contraseña_de_tu_base_de_datos
DB_HOST=host_de_tu_base_de_datos
DB_DIALECT=dialect_de_tu_base_de_datos (por ejemplo, mysql, postgres, etc.)

Configura la base de datos
a. Inicia el servidor MySQL
Asegúrate de que el servidor MySQL esté en ejecución.

b. Crea la base de datos y las tablas
Ejecuta el siguiente comando en tu terminal MySQL para crear la base de datos y las tablas necesarias:

*******************************************************************************************************************************************************************************************
CREATE DATABASE  IF NOT EXISTS `trabajodebackend` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `trabajodebackend`;

DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO `categories` VALUES (1,'Electrónica','Dispositivos y gadgets','2024-07-23 13:27:35','2024-07-23 13:27:35'),(2,'Libros','Diversos tipos de libros y literatura','2024-07-23 13:27:35','2024-07-23 13:27:35'),(3,'Ropa','Vestimenta para hombres, mujeres y niños','2024-07-23 13:27:35','2024-07-23 13:27:35'),(4,'Hogar y Cocina','Electrodomésticos y utensilios de cocina','2024-07-23 13:27:35','2024-07-23 13:27:35');

DROP TABLE IF EXISTS `products`;
CREATE TABLE `products` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text,
  `price` decimal(10,2) NOT NULL,
  `stock` int NOT NULL,
  `category_id` int DEFAULT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `category_id` (`category_id`),
  CONSTRAINT `products_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO `products` VALUES (1,'Smartphone','Latest model smartphone',699.99,50,1,'2024-07-28 17:21:04','2024-07-28 17:21:04'),(3,'Libro de Cocina','Libro de recetas para cocina casera',29.99,100,2,'2024-07-28 17:21:34','2024-07-28 20:41:14'),(4,'Chaqueta de Invierno','Chaqueta cálida para el invierno',89.99,30,3,'2024-07-28 17:21:34','2024-07-28 17:21:34'),(5,'Tostadora','Tostadora de pan de alta calidad',49.99,20,4,'2024-07-28 17:21:34','2024-07-28 17:21:34'),(6,'Libro de ficción','Es genial',455.00,3,2,'2024-07-28 20:36:46','2024-07-28 20:36:46'),(7,'Las 48 leyes del poder','Good',2.00,4,2,'2024-07-28 20:40:59','2024-07-28 20:40:59'),(8,'Zeus','Cane Corso',0.00,1,4,'2024-07-28 20:43:37','2024-07-28 20:43:37');

*******************************************************************************************************************************************************************************************


Estructura del Proyecto
index.js: Archivo principal que configura y levanta el servidor.
config/dataBase.js: Archivo de configuración de Sequelize para la conexión a la base de datos.
routes/indexRoutes.js: Archivo que define las rutas de la API.
middleware/error.js: Middleware para el manejo de errores.
models/: Carpeta que contiene los modelos de Sequelize.
controllers/: Carpeta que contiene los controladores de las rutas.

Ejecución del Servidor
Levanta el servidor:  
npm start

El servidor estará corriendo en el puerto definido en el archivo .env. Por defecto, es el puerto 3000.

Verifica la conexión a la base de datos:

El servidor intentará conectar con la base de datos y sincronizar los modelos definidos en models/.

Uso de la API
La API está configurada para responder a las solicitudes en la ruta /api. Asegúrate de definir tus rutas en routes/indexRoutes.js.

Middlewares
CORS: Configurado para permitir solicitudes desde http://localhost:3001.
Morgan: Utilizado para el registro de solicitudes HTTP.
Error Handler: Middleware para el manejo centralizado de errores.
Migraciones y Modelos
Este proyecto utiliza Sequelize para el ORM. Las migraciones y los modelos se pueden gestionar mediante los comandos de Sequelize. Asegúrate de sincronizar la base de datos con:

await sequelize.sync({ alter: true });


Troubleshooting
Si encuentras algún problema al levantar el servidor, verifica lo siguiente:

Asegúrate de que las variables de entorno están correctamente configuradas en el archivo .env.
Revisa los mensajes de error en la consola para identificar posibles problemas de configuración o de conexión a la base de datos.
Consulta la documentación de Sequelize para obtener más detalles sobre la configuración y uso del ORM.
Contribuciones
Si deseas contribuir a este proyecto, por favor abre un pull request o crea un issue en el repositorio.

